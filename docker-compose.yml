version: '3'

services:
  reverse-proxy:
    image: traefik
    command: --configFile=/var/traefik/traefik.toml
    ports:
      - 80:80
      - 7128:8080
    volumes:
      - $PWD/traefik.toml:/var/traefik/traefik.toml
      - /var/run/docker.sock:/var/run/docker.sock

  hbase:
    image: dajobe/hbase
    volumes:
      - hbase-data:/data
    ports:
      - 8080:8080
      - 8085:8085
      - 9090:9090
      - 9095:9095
      - 2181:2181
      - 16010:16010

  rabbitmq:
    image: rabbitmq:management
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq/mnesia
    ports:
      - 4369:4369
      - 5671:5671
      - 5672:5672
      - 15671:15671
      - 15672:15672
      - 25672:25672

  postgres:
    image: postgres
    ports:
      - 5432:5432
    volumes:
      - postgres-data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: medtagger
      POSTGRES_USER: medtagger_user
      POSTGRES_PASSWORD: MedTa99er!

  medtagger_frontend:
    image: medtagger_frontend/web
    build:
      context: frontend
      dockerfile: Dockerfile
      args:
        - PRODUCTION=${MEDTAGGER__FRONTEND_PRODUCTION}
    ports:
      - 80:80
    depends_on:
      - medtagger_backend_rest

  medtagger_backend_rest:
    image: medtagger_backend/rest
    environment:
      - MEDTAGGER__API_HOST=0.0.0.0
      - MEDTAGGER__API_REST_PORT=51000
      - MEDTAGGER__API_WEBSOCKET_PORT=51001
      - MEDTAGGER__API_DEBUG=1
      - MEDTAGGER__API_SECRET_KEY=SECRET_KEY
      - MEDTAGGER__DB_DATABASE_URI=postgresql://medtagger_user:MedTa99er!@postgres:5432/medtagger
      - MEDTAGGER__HBASE_HOST=hbase
      - MEDTAGGER__HBASE_PORT=9090
      - MEDTAGGER__HBASE_REST_PORT=8080
      - MEDTAGGER__HBASE_CONNECTION_POOL_SIZE=25
      - MEDTAGGER__CELERY_BROKER=pyamqp://guest:guest@rabbitmq//
    build:
      context: backend
      dockerfile: Dockerfile_rest
      args:
        - INSTALL_SYSTEM_DEPENDENCIES=${MEDTAGGER__BACKEND_INSTALL_SYSTEM_DEPENDENCIES}
    depends_on:
      - hbase
      - rabbitmq
      - postgres
      - medtagger_backend_websocket
      - medtagger_backend_worker
    command: bash -c "./scripts/wait_for_dependencies.sh && ./scripts/dev__prepare_backend.sh && make run_rest_production"

  medtagger_backend_websocket:
    image: medtagger_backend/websocket
    environment:
      - MEDTAGGER__API_HOST=0.0.0.0
      - MEDTAGGER__API_REST_PORT=51000
      - MEDTAGGER__API_WEBSOCKET_PORT=51001
      - MEDTAGGER__API_DEBUG=1
      - MEDTAGGER__API_SECRET_KEY=SECRET_KEY
      - MEDTAGGER__DB_DATABASE_URI=postgresql://medtagger_user:MedTa99er!@postgres:5432/medtagger
      - MEDTAGGER__HBASE_HOST=hbase
      - MEDTAGGER__HBASE_PORT=9090
      - MEDTAGGER__HBASE_REST_PORT=8080
      - MEDTAGGER__HBASE_CONNECTION_POOL_SIZE=25
      - MEDTAGGER__CELERY_BROKER=pyamqp://guest:guest@rabbitmq//
    build:
      context: backend
      dockerfile: Dockerfile_websocket
      args:
        - INSTALL_SYSTEM_DEPENDENCIES=${MEDTAGGER__BACKEND_INSTALL_SYSTEM_DEPENDENCIES}
    depends_on:
      - hbase
      - rabbitmq
      - postgres
    command: bash -c "./scripts/wait_for_dependencies.sh && ./scripts/dev__prepare_backend.sh && make run_websocket_production"

  medtagger_backend_worker:
    image: medtagger_backend/worker
    environment:
      - MEDTAGGER__API_HOST=0.0.0.0
      - MEDTAGGER__API_REST_PORT=51000
      - MEDTAGGER__API_WEBSOCKET_PORT=51001
      - MEDTAGGER__API_DEBUG=1
      - MEDTAGGER__API_SECRET_KEY=SECRET_KEY
      - MEDTAGGER__DB_DATABASE_URI=postgresql://medtagger_user:MedTa99er!@postgres:5432/medtagger
      - MEDTAGGER__HBASE_HOST=hbase
      - MEDTAGGER__HBASE_PORT=9090
      - MEDTAGGER__HBASE_REST_PORT=8080
      - MEDTAGGER__HBASE_CONNECTION_POOL_SIZE=10
      - MEDTAGGER__CELERY_BROKER=pyamqp://guest:guest@rabbitmq//
    build:
      context: backend
      dockerfile: Dockerfile_worker
      args:
        - INSTALL_SYSTEM_DEPENDENCIES=${MEDTAGGER__BACKEND_INSTALL_SYSTEM_DEPENDENCIES}
    depends_on:
      - hbase
      - rabbitmq
      - postgres
    command: bash -c "./scripts/wait_for_dependencies.sh && ./scripts/dev__prepare_backend.sh && make run_workers"

volumes:
  hbase-data:
  rabbitmq-data:
  postgres-data:
